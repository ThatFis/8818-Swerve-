package frc.robot;

import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
//
import com.revrobotics.CANSparkLowLevel.MotorType;
import com.revrobotics.CANSparkMax;
//
import edu.wpi.first.wpilibj.XboxController;

public class Robot extends TimedRobot {
  private static final String kDefaultAuto = "Default";
  private static final String kCustomAuto = "My Auto";
  private String m_autoSelected;
  private final SendableChooser<String> m_chooser = new SendableChooser<>();
  //
  CANSparkMax frontLeftD = new CANSparkMax(1, MotorType.kBrushless);  
  CANSparkMax backLeftD = new CANSparkMax(2, MotorType.kBrushless);
  CANSparkMax frontRightD = new CANSparkMax(3, MotorType.kBrushless); 
  CANSparkMax backRightD = new CANSparkMax(4, MotorType.kBrushless);  

  //
  CANSparkMax frontLeftT = new CANSparkMax(5, MotorType.kBrushless);  
  CANSparkMax backLeftT = new CANSparkMax(6, MotorType.kBrushless);
  CANSparkMax frontRightT = new CANSparkMax(7, MotorType.kBrushless); 
  CANSparkMax backRightT = new CANSparkMax(8, MotorType.kBrushless);  

  //
  CANSparkMax Upperintake = new CANSparkMax(9, MotorType.kBrushless);  
  CANSparkMax Lowerintake = new CANSparkMax(10, MotorType.kBrushless);  

  CANSparkMax OShooter = new CANSparkMax(11, MotorType.kBrushless);  
  CANSparkMax GShooter = new CANSparkMax(12, MotorType.kBrushless);  
  
  //
  XboxController driver = new XboxController(0);

  /**
   * This function is run when the robot is first started up and should be used for any
   * initialization code.
   */
  @Override
  public void robotInit() {
    m_chooser.setDefaultOption("Default Auto", kDefaultAuto);
    m_chooser.addOption("My Auto", kCustomAuto);
    SmartDashboard.putData("Auto choices", m_chooser);
  }

  /**
   * This function is called every 20 ms, no matter the mode. Use this for items like diagnostics
   * that you want ran during disabled, autonomous, teleoperated and test.
   *
   * <p>This runs after the mode specific periodic functions, but before LiveWindow and
   * SmartDashboard integrated updating.
   */
  @Override
  public void robotPeriodic() {}

  /**
   * This autonomous (along with the chooser code above) shows how to select between different
   * autonomous modes using the dashboard. The sendable chooser code works with the Java
   * SmartDashboard. If you prefer the LabVIEW Dashboard, remove all of the chooser code and
   * uncomment the getString line to get the auto name from the text box below the Gyro
   *
   * <p>You can add additional auto modes by adding additional comparisons to the switch structure
   * below with additional strings. If using the SendableChooser make sure to add them to the
   * chooser code above as well.
   */
  @Override
  public void autonomousInit() {
    m_autoSelected = m_chooser.getSelected();
    // m_autoSelected = SmartDashboard.getString("Auto Selector", kDefaultAuto);
    System.out.println("Auto selected: " + m_autoSelected);
  }

  /** This function is called periodically during autonomous. */
  @Override
  public void autonomousPeriodic() {
    switch (m_autoSelected) {
      case kCustomAuto:
        // Put custom auto code here
        break;
      case kDefaultAuto:
      default:
        // Put default auto code here
        break;
    }
  }

  /** This function is called once when teleop is enabled. */
  @Override
  public void teleopInit() {}

  /** This function is called periodically during operator control. */
  @Override
  public void teleopPeriodic() {
    // drive motors
      frontLeftD.set(driver.getLeftY());
      backLeftD.set(driver.getLeftY());
      frontRightD.set(driver.getLeftY());
    backRightD.set(driver.getLeftY());
    // turn motors
    frontLeftT.set(driver.getRightX());
    backLeftT.set(driver.getRightX());
    frontRightT.set(driver.getRightX());
    backRightT.set(driver.getRightX());


   
  //intake controls
  if(driver.getRightTriggerAxis() >= 0.15){
   Upperintake.set(-.80);  
   Lowerintake.set(.60);
  }else if(driver.getRightTriggerAxis() <0.05){
   Upperintake.stopMotor();
   Lowerintake.stopMotor();
   
  }
   if(driver.getYButton()){
   OShooter.set(-.25);  
   GShooter.set(.30);

  }else if(driver.getXButton()){
   OShooter.stopMotor();
   GShooter.stopMotor();
   
  }


}

  /** This function is called once when the robot is disabled. */
  @Override
  public void disabledInit() {}

  /** This function is called periodically when disabled. */
  @Override
  public void disabledPeriodic() {}

  /** This function is called once when test mode is enabled. */
  @Override
  public void testInit() {}

  /** This function is called periodically during test mode. */
  @Override
  public void testPeriodic() {}

  /** This function is called once when the robot is first started up. */
  @Override
  public void simulationInit() {}

  /** This function is called periodically whilst in simulation. */
  @Override
  public void simulationPeriodic() {}
}

